//
// Created by MoonKnight on 2019/9/3.
//

/*
 * 1.查找表:由同一个类型的数据元素构成的集合
 * 2.关键字:数据中数据元素的某个数据项的值
 *
 * 主关键字:如果这个关键字可以唯一的标识一个元素,那么我们叫这个关键字为主关键字
 * 次关键字:                  标识多个元素,                           次关键字
 *
 * 查找:根据给定的某个值,然后在查找表中确定一个关键字等于这个给定值的数据元素
 *
 * 静态查找表:
 *  所谓的静态查找表,实际上就是说不管我怎么查找,在这个表中的元素都不会发生变化
 *   1.查找给定的元素是不是在这个表中
 *   2.查找某个特定的元素的属性(内容)
 *
 *  动态查找表
 *  在发生查找动作的时候,这个表中的内容会发生一定的变化
 *  1.查找的时候插入元素
 *  2.查找的时候删除元素
 *
 *
 *  查找操作有这样的几个:
 *  1.顺序查找:在这个表中所有的数都是按某个顺序存放的
 *  如果我要查找这个表中存放的数据的话,我需要把这个表进行一个遍历,在遍历的过程中找到了元素,则函数返回
 *
 *  1 2 3 4 5 6 7 ....
 *
 *  我现在要找到6这个元素
 *
 *  2.有序表的查找:
 *  什么是有序表:
 *  存储在表中的数据,其关键字都是按一定的顺序存放的
 *
 *  1   C语言从入门到放弃
 *  2   JAVA从入门到放弃...
 *  3
 *  4
 *  5
 *  6
 *
 *  这样的表,就叫做有序表.
 *
 *  折半查找:
 *  举个例子
 *
 *  我们现在有一个数组,其中从小到大分别存储了1到100的数组
 *
 *  1 2 3 4.....
 *
 *  那么现在我要找到34在哪里,最快的方法是什么?
 *
 *
 *  这个序列的中间的那个数是50
 *
 *  比较34 和50 哪一个比较大
 *
 *  那么就说明34一定是在1-50之间
 *
 *  再比较25和34那个大
 *
 *  25-50
 *
 *
 *  34和37(25+12)那个大
 *
 *  25-37  ....
 *
 *
 *  折半查找的时间复杂度是O(logn)
 *
 *  线性索引查找
 *
 *  1.稠密索引查找
 *
 *  对数据项和数据建立某种一一对应的关系,通过这样的一一对应的关系来对数据项进行一个查找
 *  1   C语言从入门到放弃
 *  2   JAVA从入门到放弃...
 *  3
 *  4
 *  5
 *  6
 *
 *
 *  2.分块索引查找
 *
 *  一个图书馆会有很多的不同的分类
 *
 *  1   中文藏书    具体藏书的地址
 *  2   英文藏书    xxxxx
 *  3   西班牙文藏书  xxxxx
 *  4
 *
 *
 *  二叉排序树:
 *  二叉排序树会有这样的一个特征
 *  1.她是一个二叉树
 *  2.对于这个二叉树来说,他的某一个节点的左子树上面的值一定比当前的这个节点的值小
 *  3.他的某一个节点的右子树上面的值一定比当前的这个节点的值大
 *  4.他的左右子树也一定满足上面这3个条件
 *
 *  62 88 58
 *
 *  62 88 58 47 35 73 51 99 37 93
 *
 *  二叉排序树的查找最坏的情况需要查找的次数是跟这个树的最大深度一致
 *  但是,最大深度通常是小于等于总的节点数的.
 *  有可能二叉排序树查找需要花费的时间跟顺序查找一样(当这个树是斜树的情况下)
 *  但是,如果这个二叉树有一个分支(非斜树),那么查找的时间复杂度就大概率是小于顺序查找的
 *
 *
 *  最坏的情况示跟顺序查找一样,但是好的情况示要好于顺序查找的
 *
 *
 *
 *
 *
 * */

typedef struct PERSON{
   char name;
   int age;
   int id;
}Person;

